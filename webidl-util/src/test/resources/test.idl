
interface mixin ObjectBase {
    attribute USVString label;
};

[Prefix="someNamespace::", NoDelete]
interface AnInterface {
    void aFunction(long param1, optional VoidPtr param2);

    attribute unsigned long long someAttribute;
    readonly attribute unsigned long long readOnlyAttribute;
    attribute sequence<any> someSequence;
    attribute record<any, any> someRecord;
    attribute FrozenArray<any> someFrozenArray;
    attribute Promise<any> somePromise;
    attribute Promise < any > somePromiseWithExtraSpace;
};

[Prefix = "someNamespaceWithSpace::"]
interface AnotherInterface {
    void AnotherInterface();

    [Value] AnInterface overloadedFunction([Const, Ref] AnInterface param1);
    [Value] AnInterface overloadedFunction([Const, Ref] AnInterface param1, long secondParam);
};
AnotherInterface implements AnInterface;
AnotherInterface includes ObjectBase;

[Prefix="someNamespace::"]
interface ErrorCallback {
    boolean reportError(long code, DOMString message);
    AnotherInterface someOtherMethod();
};

enum ErrorCode {
    "INFO",
    "WARN",
    "ERROR"
};

[JSImplementation="ErrorCallback"]
interface JavaErrorCallback {
    void JavaErrorCallback();
    void reportError(ErrorCode code, DOMString message);
    AnotherInterface someOtherMethod(AnInterface anInterface);
};

dictionary AnDictionary {
    unsigned long long someMember;
    required unsigned long long requiredMember;
    USVString someMemberWithDefaultValue = "my string";
};


interface SetLikeInterface {
    readonly setlike<DOMString>;
};